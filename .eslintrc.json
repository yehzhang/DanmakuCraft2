{
  "env": {
    "es2020": true
  },
  "extends": ["eslint:recommended", "prettier"],
  "plugins": ["jsdoc", "prettier"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "sourceType": "module"
  },
  "rules": {
    "prettier/prettier": "warn",
    "no-restricted-globals": [
      "warn",
      {
        "name": "parseInt",
        "message": "Use `Number()` instead."
      }
    ],
    "dot-notation": "warn",
    "eqeqeq": ["error", "always", { "null": "ignore" }],
    "guard-for-in": "error",
    "prefer-template": "error",
    "id-blacklist": [
      "error",
      "any",
      "unknown",
      "number",
      "string",
      "boolean",
      "undefined",
      "err",
      "e",
      "evt",
      "cb"
    ],
    "jsdoc/check-alignment": "warn",
    "jsdoc/check-indentation": "warn",
    "jsdoc/newline-after-description": "warn",
    "no-caller": "warn",
    "no-cond-assign": ["error", "always"],
    "no-eval": "warn",
    "no-invalid-this": "warn",
    "no-new-wrappers": "error",
    "no-shadow": [
      "warn",
      {
        "builtinGlobals": false,
        "hoist": "functions",
        "allow": []
      }
    ],
    "no-throw-literal": "error",
    "no-undef-init": "warn",
    "no-unsafe-finally": "error",
    "object-shorthand": "error",
    "one-var": ["error", "never"],
    "spaced-comment": "warn",
    "use-isnan": "error"
  },
  "overrides": [
    {
      // TypeScript
      "files": ["*.ts", "*.tsx"],
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:react/recommended",
        "prettier",
        "prettier/@typescript-eslint",
        "prettier/react"
      ],
      "plugins": ["@typescript-eslint", "react"],
      "rules": {
        "react/display-name": "off", // Inccorectly reports arrow functions that return JSX.
        // Checked by TS.
        "no-undef": "off",
        "no-fallthrough": "off",
        // Rules existing in eslint and extended by typescript-eslint.
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "warn",
        "camelcase": "off",
        "@typescript-eslint/camelcase": [
          "error",
          {
            "genericType": "always"
          }
        ],
        // Regular rules.
        "@typescript-eslint/no-empty-function": "warn",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-unused-vars": [
          "warn",
          {
            "varsIgnorePattern": "[iI]gnored"
          }
        ]
      }
    },
    {
      // Running in browsers
      "files": ["client/**/*.*", "**/*.user.js"],
      "env": {
        "browser": true
      },
      "rules": {
        "no-restricted-imports": [
          "error",
          {
            "name": "lodash",
            "message": "Import from individual module instead to reduce dependency, e.g., `import identity from 'lodash/identity';`"
          }
        ],
        "no-console": [
          "warn",
          {
            "allow": ["warn", "error"]
          }
        ]
      }
    },
    {
      // Running in Node envrionement
      "files": ["scripts/**/*.*", "website/**/*.*", "backend/**/*.*", "**/webpack.*.js"],
      "env": {
        "node": true
      }
    }
  ],
  "reportUnusedDisableDirectives": true
}
